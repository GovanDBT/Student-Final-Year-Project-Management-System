// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])

  @@map("sessions")
}

model User {
  id                 String         @id @default(cuid())
  userId             String?        @unique
  name               String?
  email              String?        @unique
  emailVerified      DateTime?      @map("email_verified")
  password           String?
  image              String?
  office             String?
  phone              String?        @unique
  isActive           Boolean        @default(true)
  // relationships
  programme          Programme?
  role               Role?          @default(STUDENT)
  project            Project?       @relation("studentProject")
  supervisorProjects Project[]      @relation("supervisorProjects")
  accounts           Account[]
  sessions           Session[]
  Feedback           Feedback[]
  Deadline           Deadline[]
  Announcement       Announcement[]
  Comment            Comment[]
  Submission         Submission[]

  @@map("users")
}

model Project {
  id           Int           @id @unique @default(autoincrement())
  title        String
  description  String        @db.LongText
  status       ProjectStatus @default(PENDING)
  studentId    String?       @unique
  supervisorId String
  dateCreated  DateTime      @default(now())
  dateUpdated  DateTime?     @updatedAt
  // relationships
  student      User?         @relation(name: "studentProject", fields: [studentId], references: [userId])
  supervisor   User          @relation(name: "supervisorProjects", fields: [supervisorId], references: [id])
  comment      Comment[]

  @@map("projects")
}

model Comment {
  id          Int      @id @unique @default(autoincrement())
  comment     String?  @db.LongText
  projectId   Int?
  userId      String?
  dateCreated DateTime @default(now())
  // relationships
  project     Project? @relation(fields: [projectId], references: [id])
  user        User?    @relation(fields: [userId], references: [id])

  @@map("comments")
}

model Submission {
  id            Int        @id @unique @default(autoincrement())
  userId        String
  deadlineId    Int?
  fileURL       String
  description   String?
  dateSubmitted DateTime   @default(now())
  dateUpdated   DateTime?  @updatedAt
  // relationships
  user          User       @relation(fields: [userId], references: [userId])
  deadline      Deadline?  @relation(fields: [deadlineId], references: [id])
  Feedback      Feedback[]

  @@map("submissions")
}

model Feedback {
  id            Int        @id @unique @default(autoincrement())
  supervisorId  String
  submissionId  Int
  comment       String
  dateSubmitted DateTime   @default(now())
  dateUpdated   DateTime   @updatedAt
  // relationships
  supervisor    User       @relation(fields: [supervisorId], references: [id])
  submission    Submission @relation(fields: [submissionId], references: [id])

  @@map("feedbacks")
}

model Deadline {
  id            Int          @id @unique @default(autoincrement())
  coordinatorId String
  title         String
  description   String?
  deadlineDate  DateTime
  isSubmittable Boolean      @default(false)
  dateCreated   DateTime     @default(now())
  dateUpdated   DateTime?    @updatedAt
  // relationships
  coordinator   User         @relation(fields: [coordinatorId], references: [id])
  Submission    Submission[]

  @@map("deadlines")
}

model Announcement {
  id            Int      @id @unique @default(autoincrement())
  coordinatorId String
  title         String
  description   String
  dateCreated   DateTime @default(now())
  dateUpdated   DateTime @updatedAt
  // relationships
  coordinator   User     @relation(fields: [coordinatorId], references: [id])

  @@map("announcements")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

enum Role {
  STUDENT
  SUPERVISOR
  COORDINATOR
  ADMIN
}

enum ProjectStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

enum Programme {
  BSC_COMPUTER_SCIENCE
  BSC_INFORMATION_TECHNOLOGY
  BSC_COMPUTING_WITH_FINANCE
  BSC_COMPUTER_INFORMATION_SYSTEMS
}
